{"version":3,"sources":["app_component/weather.cmponent.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0db3689d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n\r\n          <div className=\"cards pt-4\">\r\n         <h1>\r\n          {props.city}\r\n          </h1> \r\n              <h5 className=\"py-4\">\r\n                  <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n              </h5>\r\n          \r\n             {props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null }\r\n\r\n              {/* show max and min temp */}\r\n              {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n              <h4 className=\"py-3\">{props.description}</h4>\r\n          </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction minmaxTemp(min, max){\r\n    \r\n            if(min && max){\r\n                return (\r\n                    <h3>\r\n                    <span className=\"px-4\">{min}&deg;</span>\r\n                    <span className=\"px-4\">{max}&deg;</span>\r\n        \r\n                </h3>\r\n          \r\n                )\r\n            }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.style.css\";\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div>{props.error? error(): null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\"> \r\n                <input \r\n                type=\"text\"\r\n                className=\"form-control\" \r\n                name=\"city\"\r\n                autoComplete=\"off\" \r\n                placeholder=\"city\"\r\n                />\r\n                </div>\r\n                <div className=\"col-md-3\"> \r\n                <input \r\n                type=\"text\"\r\n                className=\"form-control\" \r\n                name=\"country\"\r\n                autoComplete=\"off\" \r\n                placeholder=\"country\"\r\n                />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-3 text-md-left\">\r\n                    <button className=\"btn btn-warning\">\r\n                        Get Weather\r\n                    </button>\r\n                 </div>\r\n             </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error() {\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\nexport default Form;","import React from 'react';\nimport './App.css';\n\nimport \"weather-icons/css/weather-icons.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from './app_component/weather.cmponent';\nimport Form from './app_component/form.component';\n \n// api call to api.openweathermap.org/data/2.5/weather?q=London,uk\n\n\nconst API_key = \"c01180329f12b8fdce7d90b241591854\";\n\n\nclass App extends React.Component{\nconstructor(){\n  super();\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n\n    };\n\n    this.weatherIcon ={\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n}  \n\ncalCelsius(temp){\n  let cell = Math.floor(temp - 273.15);\n  return cell;\n}\n\n get_WeatherIcon(icons,rangeId){\n   switch(true){\n      case rangeId >=200 && rangeId <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >=300 && rangeId <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;  \n      case rangeId >=500 && rangeId <= 531:\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rangeId >=600 && rangeId <= 622:\n        this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rangeId >=701 && rangeId <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rangeId === 800:\n        this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rangeId >=801 && rangeId <= 804:\n        this.setState({icon: this.weatherIcon.Clouds});\n        break;\n\n      default:\n        this.setState({icon: this.weatherIcon.Clouds});\n   }\n }\n\n getWeather = async (e) => {\n\n   e.preventDefault();\n\n   const city = e.target.elements.city.value;\n   const country = e.target.elements.country.value;\n   \n   if(city&&country) {\n    const api_call = await \n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n    const response = await api_call.json();\n    console.log(response);\n\n    this.setState({\n    city: `${response.name},${response.sys.country}`,\n    country: response.sys.country,\n    celsius: this.calCelsius(response.main.temp),\n    temp_max: this.calCelsius(response.main.temp_max),\n    temp_min: this.calCelsius(response.main.temp_min),\n    description: response.weather[0].description,\n    error: false\n\n})\n\nthis.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n\n   } else {\n      this.setState({error: true})\n   }\n  }\n\nrender () {\n       \n    return (\n      <div className=\"App\">\n        <Form \n         loadweather={this.getWeather}\n         error={this.state.error}\n        />\n        <Weather city={this.state.city} \n        country={this.state.country}\n        temp_celsius = {this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min ={this.state.temp_min}\n        description ={this.state.description}\n        weatherIcon = {this.state.icon}\n        />\n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}